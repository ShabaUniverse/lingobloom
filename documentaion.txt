1. О сборке: ---------------------------------------------------------------------

Проект был создан на React.js, с инструментом сборки Vite - который обеспечивает быструю разработку
и высокую производительность.


Для базы данных использовал Firebase. Использовал сервисы Firebase, такие как:
Authentication - для авторизации.
Firestore - для хранения базы данных.
Storage - для загрузки файлов (изображений и т д);


Для маршрутизации использовал React-Router-Dom (6 версия);


Для стилей использовал Tailwind - CSS фреймворк, для того чтоб быстро создавать
интерфейс.
Так же использовал простые стили CSS, там где невохможно  нет быстрых классов Tailwind.


Для звонков использовал Google Meet. Более простой и легкий способ организации звонков
и встреч.


2. О Firebase -----------------------------------------------------------------------------

Все данные пользователей хранятся в Firebase Firestore.
Чаты так же хранятся там.

Фотографии хранятся в Firebase Storage.

3. О React-Router-Dom ----------------------------------------------------------------------

Маршрутизация сделана при помощи библиотеки React-Router-Dom 6 версии.

Проделана работа по "Root Protections", то есть - неавторизованным не будет видно некие страницы, такие как:
Profile, Chat, Community и т д, все что включает нужду авторизованного пользователя.

Так же главная страница Home доступна только для неавторизованных пользователей. 
Если пользователь авторизован, при входе в сайт его перебрасывает на его профиль автоматически.

4. Google Meet ------------------------------------------------------------------------------

При звонке пользователя выбрасывает на внешнию страницу Google Meet. При это пользователь обязан поделиться
ссылкой на звонок вручную, так как автоматический share требует back-end разработки.


6. State Management --------------------------------------------------------------------------

Я не стал использовать State Manager'ы такие как Redux или MobX.
Использовал React Context API, и Local Storage. Так как проект не требовал много state'ов для работы.
Их всего лишь два по расчету. ActiveUID и ActiveUser.

Local Storage - хранит данные в браузере если пользователь авторизовался, то есть сайт сохранит его как 
авторизованного при в следующем входе, чтобы он снова не заходил. При желании можно выйти из аккаунта,
и Local Storage стерёт данные.

7. Components ---------------------------------------------------------------------------------

В итоге расчитал 12 компонентов, из них 10 страничные. Остальные два на выбор или постоянные: Header, Pending.

Header - отображается во всех маршрутах. Включает в себя маршрутизацию:
для авторизованных - Profile, Hub, Community, Friends.
для неавторизованных - Login.

Pending - наверное самый маленький компонент который отображается при загрузке, то есть при запросах
на API и рендерах.

Эти самые основные маршруты, остальные маршруты второстепенные, такие как UserProfile - профиль других
пользователей. VideoCall - для звонков соотвественно, он исходит от чата.


8. Hosting ------------------------------------------------------------------------------------

Хостинг устроен при помощи сервиса netlify.

9. Folders & Files --------------------------------------------------------------------------------------

dist - это папка production. При вписывании команды "npm run build", проект собирается в эту
папку чтоб его можно было отправить на Хостинг

node-modules - папка сборки проекта. 

public - тут можно было хранить изображение и SVG файлы, но не было нужды использовать.

src - основная папка проекта. 

    src/assets - тут SVG файлы и изображения для проекта.

    src/components - отдельные компоненты

    src/firebase - конфигурации Firebase сохранены тут.

    src/pages - отдельные страницы сайта.

    src/styles - сохранены стили которые нельзя было сделать на Tailwind.

App.css - индивидуальные CSS компоненты

App.jsx - выступает в роли главного корневого компонента всего приложения.
это компонент который подключает и оборачивает все другие компоненты проекта.
здесь так же хранятся глобальные states.

index.css - тут ссылки на Tailwind CSS

main.jsx - это файл который служит точкой входа в React приложение. 
В нем происходит рендеринг  корневого компонента App.jsx в DOM-дерево.
Этот файл связывает React компоненты с HTML разметкой, которая находится в 
index.html

index.html - это основной HTML-документ React-приложения, 
который загружается браузером.  Его структура очень проста, 
так как большая часть содержимого приложения генерируется динамически через React. 
Этот файл служит точкой входа для всего приложения и содержит элемент с 
идентификатором root, в который будет рендериться всё React-приложение.
Тут так же находятся импорты шрифта.


package.json & package-lock.json - эти файлы где хранятся библиотеки и основные
инструменты которые используются для разработки приложения.

tailwind.config.js - тут сборка Tailwind фреймворка.

ОСТАЛЬНЫЕ ФАЙЛЫ НЕ ТРЕБУЮТ ОСОБОГО ВНИМАНИЯ.


10.Key Functions -------------------------------------------------------------------------------------------

ChatActive,jsx:
    sendMessage - функция отправки сообщения. Получает данные активного пользователя и второго.
    Затем он собирает их данные, и существующий чат между ними.
    При наборе текста и нажатии на Send, приложение отправляет запрос на находку этого чата в Firestore и
    обновляет нишу в этой базе.

    unsubscribe - при входе в чат, он собирает сообщения в чате и рендерит его на странице.

    getAllChatUsers - рендерит список пользователей, с которыми есть чат у активного пользователя.

    getUserData - получает данные о втором пользователя (с которым идёт чат), чтобы высветить
    его, дать понять с кем идёт чат.

    getSecondUserPhotoAndName - по названию, можно понять, что функция для рендера имени и фото
    пользователя с которым идёт чат.

    handleCall - для совершения видеозвонка.

    так же в начале используется useEffect, срабатывает в начале и при изменении messages, чтоб
    прокрутить вниз чат.


Community.jsx
    Тут используются два useEffect, чтоб рендерить рекомендованных пользователей и запросы поиска.


Friends.jsx
    Тут функции чтобы получать данные о активном пользователе чтоб вытащить followers & following.
    Затем, он делает из них массив и рендерит на странице.

Home.jsx
    Тут нет функций, просто скелет сайта.

Hub.jsx
    Есть функция для рендера случайной цитаты для страницы и логика прогресса.


Profile.jsx
    Есть функции для загрузки фотографий, и изменения данные о активном пользователе.
    так же есть функция logout для выхода из аккаунта.

UserProfile.jsx
    Фунция для подписки/отписки, и начинании чата.

firebase-config.js
    Тут конфигурации Firebase с его методами.







