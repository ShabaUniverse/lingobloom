1. About the Build
The project was built using React.js with Vite as the build tool, ensuring fast development and high performance.

For the database, I used Firebase, utilizing the following services:
Authentication – for user authorization.
Firestore – for storing the database.
Storage – for uploading files (images, etc.).
For routing, I used React Router DOM (version 6).

For styling, I used Tailwind CSS, a framework that allows for fast UI development.
I also used simple CSS styles where Tailwind's utility classes were insufficient.

For calls, I integrated Google Meet, providing a simple and lightweight solution for organizing calls and meetings.

2. About Firebase
All user data is stored in Firebase Firestore.
Chats are also stored in Firestore.
Images are stored in Firebase Storage.

3. About React Router DOM
Routing is implemented using React Router DOM (version 6).

A "Route Protection" mechanism has been implemented, meaning that unauthorized users cannot access pages like:
Profile, Chat, Community, etc.—anything that requires an authorized user.

Additionally, the Home page is only available to unauthorized users.
If a user is logged in, they are automatically redirected to their profile upon entering the site.

4. Google Meet
During a call, the user is redirected to an external Google Meet page.
The user must manually share the meeting link, as automatic sharing requires backend development.

5. State Management
I did not use state managers like Redux or MobX.
Instead, I used React Context API and Local Storage since the project does not require extensive state management.
There are only two key states:
ActiveUID
ActiveUser
Local Storage stores user data in the browser when they log in.
This ensures the user remains logged in even after refreshing the page.
If the user logs out, Local Storage clears their data.

6. Components
The project consists of 12 components, with 10 being page components.
The remaining two are either optional or permanent:
Header – Appears on all routes. It includes navigation for:
Authorized users: Profile, Hub, Community, Friends.
Unauthorized users: Login.
Pending – The smallest component, displayed during loading, such as API requests or rendering delays.

Main Routes:
Other routes are secondary, such as:
UserProfile – Displays other users' profiles.
VideoCall – Used for making calls; originates from the chat.

7. Hosting
The project is hosted using Netlify.

8. Folder & File Structure
dist – The production folder. When running "npm run build", the project is compiled here for deployment.
node_modules – The project's dependency folder.
public – Could store images and SVG files, but was not needed.
src – The main project folder.

Inside src Folder:
src/assets – Contains SVG files and images.
src/components – Contains reusable components.
src/firebase – Firebase configurations.
src/pages – Contains individual page components.
src/styles – Stores styles that couldn’t be handled by Tailwind.

Main Files:
App.css – Custom CSS for specific components.
App.jsx – The root component of the application. It wraps all other components and stores global states.
index.css – Contains Tailwind CSS imports.
main.jsx – The entry point of the React app. It renders App.jsx into the DOM.
index.html – The main HTML file, containing the <root> element where React renders the app. Also includes font imports.
package.json & package-lock.json – Define project dependencies and tools.
tailwind.config.js – Configures the Tailwind framework.
Other files are not particularly important.

9. Key Functions
ChatActive.jsx
sendMessage – Sends a message. It gathers data from the active user and recipient, retrieves the existing chat from Firestore, and updates it when a message is sent.
unsubscribe – Loads and renders messages in the chat.
getAllChatUsers – Retrieves and displays a list of users with whom the active user has chatted.
getUserData – Fetches data of the recipient (chat partner) to display their profile.
getSecondUserPhotoAndName – Renders the recipient's name and profile picture.
handleCall – Initiates a video call.
useEffect – Automatically scrolls to the bottom of the chat when messages change.

Community.jsx
Uses two useEffect hooks to render recommended users and search requests.

Friends.jsx
Retrieves followers and following of the active user, converts them into an array, and renders them on the page.

Home.jsx
No functions—just the site’s skeleton.

Hub.jsx
Includes functions to render a random quote and handle progress logic.

Profile.jsx
Functions for uploading photos and updating user data.

logout – Logs the user out and clears their session.

UserProfile.jsx
Subscription/unsubscription functions and chat initiation functions.

firebase-config.js
Stores Firebase configurations and its associated methods.
